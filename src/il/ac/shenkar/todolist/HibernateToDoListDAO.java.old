package il.ac.shenkar.todolist;
import java.util.*;

import org.hibernate.*;
import org.hibernate.cfg.*;
import org.hibernate.criterion.Projections;

public class HibernateToDoListDAO implements IToDoListDAO {
	
	SessionFactory factory;
	Session session ;
	
	private static HibernateToDoListDAO instance;
	
	private HibernateToDoListDAO() {}
	
	public static HibernateToDoListDAO getInstance(){
		if (instance == null){
			instance = new HibernateToDoListDAO();
		}
		return instance;
	}
	
	@Override
	public void updateItem(Item item) throws ToDoListException {
		factory = new Configuration().configure().buildSessionFactory();
		session = factory.openSession();
		try{
			session.beginTransaction();
			session.saveOrUpdate(item);
			session.getTransaction().commit();
		}
		catch(HibernateException e){ 
			throw new ToDoListException("Hibernate: UpdateItem");
		}
		finally{
			session.close();
		}
	}

	@Override
	public void updateUser(User user) throws ToDoListException {
		factory = new Configuration().configure().buildSessionFactory();
		session = factory.openSession();
		try{
			session.beginTransaction();
			session.saveOrUpdate(user);
			session.getTransaction().commit();
			}
		catch(HibernateException e){
			throw new ToDoListException("Hibernate: UpdateUser");
			}
		finally{
			session.close();
		}
	}

	@Override
	public void deleteItem(Item item) throws ToDoListException {
		factory = new Configuration().configure().buildSessionFactory();
		session = factory.openSession();
		try{
			session.beginTransaction();
			session.delete(item);
			session.getTransaction().commit();
			}
		catch(HibernateException e){
				throw new ToDoListException("Hibernate: DeleteItem");
			}
		finally{
			session.close();
		}
	}

	@Override
	public void deleteUser(int userId) throws ToDoListException {
		factory = new Configuration().configure().buildSessionFactory();
		session = factory.openSession();
		User user = (User) session.get(User.class, userId);
		try{	
			session.beginTransaction();
			session.delete(user);
			session.getTransaction().commit();
			}
		catch(HibernateException e){
				throw new ToDoListException("Hibernate: DeleteUser");
			}
		finally{
			session.close();
		}	
	}

	@Override
	public void addItem(Item item) throws ToDoListException {
		factory = new Configuration().configure().buildSessionFactory();
		session = factory.openSession();
		try{
			session.beginTransaction();
			session.save(item);
			session.getTransaction().commit();
		}
		catch(HibernateException e){
			throw new ToDoListException("Hibernate: AddItem");
		}
		finally{
			session.close();
		}
	}

	@Override
	public void addUser(User user) throws ToDoListException {
		factory = new Configuration().configure().buildSessionFactory();
		session = factory.openSession();
		try{
			session.beginTransaction();
			session.save(user);
			session.getTransaction().commit();
		}
		catch(HibernateException e){
			throw new ToDoListException("Hibernate: AddUser");
		}
		finally{
			session.close();
		}
	}

	@Override
	public Item getItem(int id)throws ToDoListException {
		Item getItem = new Item();
		factory = new Configuration().configure().buildSessionFactory();
		session = factory.openSession();
		try{
			session.beginTransaction();
			getItem = (Item)session.get(Item.class, id);
			session.getTransaction().commit();
		}
		catch(HibernateException e){
			throw new ToDoListException("Hibernate: GetItem");
		}
		finally{
			session.close();
		}
		return getItem;
	}

	@Override
	public User getUser(int id) throws ToDoListException {
		factory = new Configuration().configure().buildSessionFactory();
		session = factory.openSession();
		User user;
		try{
			session.beginTransaction();
			user = new User();
			user = (User)session.get(User.class, id);
			session.getTransaction().commit();
		}
		catch(HibernateException e){
			throw new ToDoListException("Hibernate: GetUser");
		}
		finally{
			session.close();
		}
		return user;
	}

	@Override
	public List<User> getUsers() throws ToDoListException {
		List<User> users = new ArrayList<User>();
		factory = new Configuration().configure().buildSessionFactory();
		session = factory.openSession();
		long userCount = (long) session.createCriteria(User.class).setProjection(Projections.rowCount()).uniqueResult();
		try{
			for (int i = 1; i <= userCount; i++){
				User user;
				session.beginTransaction();
				user = new User();
				user = (User)session.get(User.class, i);
				session.getTransaction().commit();
				users.add(user);
			}
		}
		catch(HibernateException e){
			throw new ToDoListException("Hibernate: GetUsers");
		}
		finally{
			session.close();
		}
		return users;
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public ArrayList<Item> getItems(int id) throws ToDoListException {
		factory = new Configuration().configure().buildSessionFactory();
		session = factory.openSession();
		String hql = "FROM Item I WHERE I.userId = :user_id";
		Query query = session.createQuery(hql);
		query.setParameter("user_id", id);
		ArrayList<Item> items = (ArrayList<Item>) query.list();
		return items;
	}
}
